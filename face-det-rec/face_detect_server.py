"""
Detect and recognize faces using dlib served by zerorpc

Should be called from a zerorpc client with ZoneMinder
alarm image metadata from zm-s3-upload.js.

This program should be run in the 'cv' virtual python environment, i.e.,
$ /home/lindo/.virtualenvs/cv/bin/python ./face_detect_server.py

This is part of the smart-zoneminder project.
See https://github.com/goruck/smart-zoneminder

Copyright (c) 2018, 2019 Lindo St. Angel
"""

import numpy as np
import cv2
import face_recognition
import json
import zerorpc
import logging
import pickle

logging.basicConfig(level=logging.ERROR)

# Get configuration.
with open('./config.json') as fp:
    config = json.load(fp)['faceDetServer']

# Heartbeat interval for zerorpc client in ms.
# This must match the zerorpc client config. 
ZRPC_HEARTBEAT = config['zerorpcHeartBeat']

# IPC (or TCP) socket for zerorpc.
# This must match the zerorpc client config.
ZRPC_PIPE = config['zerorpcPipe']

# Settings for SVM face classifier.
# The model and label encoder needs to be generated by 'train.py' first. 
SVM_MODEL_PATH = config['svmModelPath']
SVM_LABEL_PATH = config['svmLabelPath']
MIN_SVM_PROBA = config['minSvmProba']

# Images with Variance of Laplacian less than this are declared blurry. 
FOCUS_MEASURE_THRESHOLD = config['focusMeasureThreshold']

# Factor to scale image when looking for faces.
# May increase the probability of finding a face in the image. 
# Use caution setting the value > 1 since you may run out of memory.
# See https://github.com/ageitgey/face_recognition/wiki/Face-Recognition-Accuracy-Problems.
NUMBER_OF_TIMES_TO_UPSAMPLE = config['numFaceImgUpsample']

# Face detection model to use. Can be either 'cnn' or 'hog'.
FACE_DET_MODEL = config['faceDetModel']

# How many times to re-sample when calculating face encoding.
NUM_JITTERS = config['numJitters']

# Load svm face recognition model along with the label encoder.
with open(SVM_MODEL_PATH, 'rb') as fp:
	recognizer = pickle.load(fp)
with open(SVM_LABEL_PATH, 'rb') as fp:
	le = pickle.load(fp)

def svm_face_classifier(encoding, min_proba):
	# perform svm classification to recognize the face based on 128D encoding
	# note: reshape(1,-1) converts 1D array into 2D
	preds = recognizer.predict_proba(encoding.reshape(1, -1))[0]
	j = np.argmax(preds)
	proba = preds[j]
	logging.debug('svm proba {} name {}'.format(proba, le.classes_[j]))
	if proba >= min_proba:
		name = le.classes_[j]
		logging.info('svm says this is {}'.format(name))
	else:
		name = None # prob too low to recog face
		logging.info('svm cannot recognize face')
	return name

def variance_of_laplacian(image):
	# compute the Laplacian of the image and then return the focus
	# measure, which is simply the variance of the Laplacian
	return cv2.Laplacian(image, cv2.CV_64F).var()

# zerorpc server.
class DetectRPC(object):
    def detect_faces(self, test_image_paths):
        # List that will hold all images with any face detection information. 
        objects_detected_faces = []

        # Loop over the images paths provided. 
        for obj in test_image_paths:
            logging.info('**********Find Face(s) for {}'.format(obj['image']))
            for label in obj['labels']:
                # If the object detected is a person then try to identify face. 
                if label['name'] == 'person':
                    # Read image from disk. 
                    img = cv2.imread(obj['image'])
                    if img is None:
                        # Bad image was read.
                        logging.error('Bad image was read.')
                        label['face'] = None
                        continue

			        # First bound the roi using the coord info passed in.
			        # The roi is area around person(s) detected in image.
			        # (x1, y1) are the top left roi coordinates.
			        # (x2, y2) are the bottom right roi coordinates.
                    y2 = int(label['box']['ymin'])
                    x1 = int(label['box']['xmin'])
                    y1 = int(label['box']['ymax'])
                    x2 = int(label['box']['xmax'])
                    roi = img[y2:y1, x1:x2, :]
                    #cv2.imwrite('./roi.jpg', roi)
                    if roi.size == 0:
                        # Bad object roi...move on to next image.
                        logging.error('Bad object roi.')
                        label['face'] = None
                        continue

                    # Detect the (x, y)-coordinates of the bounding boxes corresponding
			        # to each face in the input image.
                    rgb = cv2.cvtColor(roi, cv2.COLOR_BGR2RGB)
                    detection = face_recognition.face_locations(rgb, NUMBER_OF_TIMES_TO_UPSAMPLE,
                        FACE_DET_MODEL)
                    if not detection:
                        # No face detected...move on to next image.
                        logging.info('No face detected.')
                        label['face'] = None
                        continue

			        # Carve out face roi from object roi. 
                    face_top, face_right, face_bottom, face_left = detection[0]
                    face_roi = roi[face_top:face_bottom, face_left:face_right, :]
                    #cv2.imwrite('./face_roi.jpg', face_roi)

			        # Compute the focus measure of the face
			        # using the Variance of Laplacian method.
			        # See https://www.pyimagesearch.com/2015/09/07/blur-detection-with-opencv/
                    gray = cv2.cvtColor(face_roi, cv2.COLOR_BGR2GRAY)
                    fm = variance_of_laplacian(gray)

			        # If fm below a threshold then face probably isn't clear enough
			        # for face recognition to work, so skip it. 
                    if fm < FOCUS_MEASURE_THRESHOLD:
                        logging.info('Face too blurry to recognize.')
                        name = None
                    else:
                        # Find the 128-dimension face encoding for face in image.
                        # face_locations in css order (top, right, bottom, left)
                        face_location = (face_top, face_right, face_bottom, face_left)
                        encoding = face_recognition.face_encodings(rgb,
                            known_face_locations=[face_location], num_jitters=NUM_JITTERS)[0]
                        logging.debug('face encoding {}'.format(encoding))
                        #cv2.rectangle(rgb, (face_left, face_top), (face_right, face_bottom), (255,0,0), 2)
                        #cv2.imwrite('./face_rgb.jpg', rgb)

					    # Perform svm classification on the encodings to recognize the face.
                        name = svm_face_classifier(encoding, MIN_SVM_PROBA)

			        # Add face name to label metadata.
                    label['face'] = name

	        # Add processed image to output list. 
            objects_detected_faces.append(obj)

        # Convert json to string and return data. 
        return(json.dumps(objects_detected_faces))

s = zerorpc.Server(DetectRPC(), heartbeat=ZRPC_HEARTBEAT)
s.bind(ZRPC_PIPE)
s.run()